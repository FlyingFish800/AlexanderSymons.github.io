<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Emulators on Alexander Symons&#39;s Portfolio</title>
    <link>http://FlyingFish800.github.io/emulators/</link>
    <description>Recent content in Emulators on Alexander Symons&#39;s Portfolio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 23 Jul 2023 15:25:12 -0800</lastBuildDate><atom:link href="http://FlyingFish800.github.io/emulators/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CPU Architecture changes</title>
      <link>http://FlyingFish800.github.io/emulators/homebrew_cpu_changes/</link>
      <pubDate>Sun, 23 Jul 2023 15:25:12 -0800</pubDate>
      
      <guid>http://FlyingFish800.github.io/emulators/homebrew_cpu_changes/</guid>
      <description>During my winter quarter last year I took a class on the RISC-V architecture and learned about the concept of pseudo-instructions, essentially assembler macros that expand to multiple machine code instructions that do one thing. I was inspired by this idea to implement it in my emulator and assembler since it would fix one of the main things I was unhappy with in the current design: the microsteps. The architecture previously had 32 microsteps which were completely unnecessary except for 2 instructions that used a few extra steps for stack operations.</description>
    </item>
    
    <item>
      <title>Chip 8 Interpreter demo</title>
      <link>http://FlyingFish800.github.io/emulators/chip8demo/</link>
      <pubDate>Wed, 15 Mar 2023 23:53:59 -0700</pubDate>
      
      <guid>http://FlyingFish800.github.io/emulators/chip8demo/</guid>
      <description>Above is a demo of my light_cycle game running in my Chip 8 interpreter modified to work with the Cheerpj runtime. I had to modify the code to embed the game code as Cheerpj didn&amp;rsquo;t want to load the raw file on its own, and it didn&amp;rsquo;t support 2D arrays or function calls with expressions in them. I packed this modified code into a jar which Cheerpj loads and runs in a javascript environment, providing all the operating system features which are required.</description>
    </item>
    
    <item>
      <title>Chip 8 Interpreter &amp; Assembler</title>
      <link>http://FlyingFish800.github.io/emulators/chip_8/</link>
      <pubDate>Wed, 08 Mar 2023 21:12:17 -0800</pubDate>
      
      <guid>http://FlyingFish800.github.io/emulators/chip_8/</guid>
      <description>Link to the my Chip 8 toolchain repository: https://github.com/FlyingFish800/Chip-8-Interpreter-Java
Link to a demo
Back in 2021 I discovered the Chip 8 instruction set from a video on youtube of someone writing their own interpreter for it. It looked like a really cool project to spend some on my extra quarantine freetime on, so I went to the technical reference they used and started to work on my own interpreter.
Chip 8 is a great first introduction to computer systems and architecture, especially if you go down the route of writing your own interpreter.</description>
    </item>
    
    <item>
      <title>Homebrew CPU Emulator</title>
      <link>http://FlyingFish800.github.io/emulators/homebrew_cpu/</link>
      <pubDate>Wed, 08 Mar 2023 10:55:12 -0800</pubDate>
      
      <guid>http://FlyingFish800.github.io/emulators/homebrew_cpu/</guid>
      <description>Link to my UMI 8 toolchain repository: https://github.com/FlyingFish800/UMI8
After watching videos by Ben Eater and SLU-4 on their custom 8-bit CPUs implemented in 7400 series TTL logic chips, I became interested in CPU architecture design and decided to make my own. I started with designing the architecture and instruction set, and I set the following goals in mind:
 The hardware should be as simple as possible It must be achievable with TTL Logic gates It should have stack/subroutine operations  My first revision of this architecture was a 16 bit design using a full 16 bit data bus, a write only memory offset register to hack in a virtual address space, and a similarly hacky interrupt system.</description>
    </item>
    
  </channel>
</rss>
